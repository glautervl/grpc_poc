# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: basicmessage.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='basicmessage.proto',
  package='basicmessage',
  syntax='proto3',
  serialized_pb=_b('\n\x12\x62\x61sicmessage.proto\x12\x0c\x62\x61sicmessage\"\x1d\n\rSimpleMessage\x12\x0c\n\x04name\x18\x01 \x01(\t\" \n\rOutputMessage\x12\x0f\n\x07message\x18\x01 \x01(\t2Y\n\x0c\x42\x61sicService\x12I\n\x0bShowMessage\x12\x1b.basicmessage.SimpleMessage\x1a\x1b.basicmessage.OutputMessage\"\x00\x42\x38\n\x1dio.grpc.examples.basicmessageB\x0fHelloWorldProtoP\x01\xa2\x02\x03HLWb\x06proto3')
)




_SIMPLEMESSAGE = _descriptor.Descriptor(
  name='SimpleMessage',
  full_name='basicmessage.SimpleMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='basicmessage.SimpleMessage.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=36,
  serialized_end=65,
)


_OUTPUTMESSAGE = _descriptor.Descriptor(
  name='OutputMessage',
  full_name='basicmessage.OutputMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='basicmessage.OutputMessage.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=67,
  serialized_end=99,
)

DESCRIPTOR.message_types_by_name['SimpleMessage'] = _SIMPLEMESSAGE
DESCRIPTOR.message_types_by_name['OutputMessage'] = _OUTPUTMESSAGE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

SimpleMessage = _reflection.GeneratedProtocolMessageType('SimpleMessage', (_message.Message,), dict(
  DESCRIPTOR = _SIMPLEMESSAGE,
  __module__ = 'basicmessage_pb2'
  # @@protoc_insertion_point(class_scope:basicmessage.SimpleMessage)
  ))
_sym_db.RegisterMessage(SimpleMessage)

OutputMessage = _reflection.GeneratedProtocolMessageType('OutputMessage', (_message.Message,), dict(
  DESCRIPTOR = _OUTPUTMESSAGE,
  __module__ = 'basicmessage_pb2'
  # @@protoc_insertion_point(class_scope:basicmessage.OutputMessage)
  ))
_sym_db.RegisterMessage(OutputMessage)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\035io.grpc.examples.basicmessageB\017HelloWorldProtoP\001\242\002\003HLW'))

_BASICSERVICE = _descriptor.ServiceDescriptor(
  name='BasicService',
  full_name='basicmessage.BasicService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=101,
  serialized_end=190,
  methods=[
  _descriptor.MethodDescriptor(
    name='ShowMessage',
    full_name='basicmessage.BasicService.ShowMessage',
    index=0,
    containing_service=None,
    input_type=_SIMPLEMESSAGE,
    output_type=_OUTPUTMESSAGE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_BASICSERVICE)

DESCRIPTOR.services_by_name['BasicService'] = _BASICSERVICE

# @@protoc_insertion_point(module_scope)
