# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sentiment_analysis_rpc_pb2 as sentiment__analysis__rpc__pb2


class ShowMessageStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Show = channel.unary_unary(
        '/sentiment_analysis_rpc.ShowMessage/Show',
        request_serializer=sentiment__analysis__rpc__pb2.InputMessage.SerializeToString,
        response_deserializer=sentiment__analysis__rpc__pb2.OutputMessage.FromString,
        )


class ShowMessageServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Show(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ShowMessageServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Show': grpc.unary_unary_rpc_method_handler(
          servicer.Show,
          request_deserializer=sentiment__analysis__rpc__pb2.InputMessage.FromString,
          response_serializer=sentiment__analysis__rpc__pb2.OutputMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sentiment_analysis_rpc.ShowMessage', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SentimentConsensusAnalysisStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ConsensusAnalysis = channel.unary_unary(
        '/sentiment_analysis_rpc.SentimentConsensusAnalysis/ConsensusAnalysis',
        request_serializer=sentiment__analysis__rpc__pb2.InputMessage.SerializeToString,
        response_deserializer=sentiment__analysis__rpc__pb2.OutputMessage.FromString,
        )


class SentimentConsensusAnalysisServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ConsensusAnalysis(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SentimentConsensusAnalysisServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ConsensusAnalysis': grpc.unary_unary_rpc_method_handler(
          servicer.ConsensusAnalysis,
          request_deserializer=sentiment__analysis__rpc__pb2.InputMessage.FromString,
          response_serializer=sentiment__analysis__rpc__pb2.OutputMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sentiment_analysis_rpc.SentimentConsensusAnalysis', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TwitterHistoricalAnalysisStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.HistoricalAnalysis = channel.unary_unary(
        '/sentiment_analysis_rpc.TwitterHistoricalAnalysis/HistoricalAnalysis',
        request_serializer=sentiment__analysis__rpc__pb2.TwitterInputMessage.SerializeToString,
        response_deserializer=sentiment__analysis__rpc__pb2.OutputMessage.FromString,
        )


class TwitterHistoricalAnalysisServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def HistoricalAnalysis(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TwitterHistoricalAnalysisServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'HistoricalAnalysis': grpc.unary_unary_rpc_method_handler(
          servicer.HistoricalAnalysis,
          request_deserializer=sentiment__analysis__rpc__pb2.TwitterInputMessage.FromString,
          response_serializer=sentiment__analysis__rpc__pb2.OutputMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sentiment_analysis_rpc.TwitterHistoricalAnalysis', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TwitterStreamAnalysisStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StreamAnalysis = channel.unary_unary(
        '/sentiment_analysis_rpc.TwitterStreamAnalysis/StreamAnalysis',
        request_serializer=sentiment__analysis__rpc__pb2.TwitterInputMessage.SerializeToString,
        response_deserializer=sentiment__analysis__rpc__pb2.OutputMessage.FromString,
        )


class TwitterStreamAnalysisServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StreamAnalysis(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TwitterStreamAnalysisServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StreamAnalysis': grpc.unary_unary_rpc_method_handler(
          servicer.StreamAnalysis,
          request_deserializer=sentiment__analysis__rpc__pb2.TwitterInputMessage.FromString,
          response_serializer=sentiment__analysis__rpc__pb2.OutputMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sentiment_analysis_rpc.TwitterStreamAnalysis', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
